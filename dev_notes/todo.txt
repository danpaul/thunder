Todo:

maybe add last processed field to base salesrecords?

change name of models (capitalize)

debug sales_records save function

do we need to sort results from api queries?

develp a centralized error handler and logger

add nextTick to "big" csv and db processing operations

get api functioning

testing

check if borough not found

add salesSum to monthly_borough_summaries

update upsert in sales_records.js and monthly_summaries...js (may only be saving new records)

iterate through boroughs and determine borough numbers in database files

set global requires, is this possible?

remember JS months are 0 based but days of the month are not

change tax class category (2 related fields) to string

import larger data set

implement monthly summary report

implement quarterly summary

validate imports/fields i.e. neighborhood, header, etc.

develop consistent data file naming/format

update package file for semantic versioning

check if file parsing function is blocking

create update and refresh methods in sales_records model in build collection functino
	also refresh method

//if we are resetting the collection, should go through and update/replace and 
// save a "last updated field" on completion, iterate the collection deleting any 
// collection before the update, this should be in controller

should add fields to base records for fields we will want to query in other models

confirm things are generating properly with new implementation

update export methods in controller and model

generate summary records from db
	
	include quarterly median sales prices, average sales price, median and average sales volume




	Error handling:

		error handling for db connection

		handle connection errors
	
		handle record save errors
	
	Testing:

		implement testing

	Refractoring:

		make csv into a module in lib directory
		
		separate mongo models into module	

	Validation:

		validate all aspects of csv import(headers, cells, etc.)
			validate price


	
	Other:

		move salesRecords controller parseFile function to model

		check easement in csv file to determine data type

		create absolute path to config file in csv.js

		update package file

DONE:

use borough as a search parameter

write "find match" function -- use sales date and address

determine if record is duplicate before saving

error: yearbuilt = invalid date

normalize string data going into database

type conversion for csv data

convert header row into js friendly names

update mongo model with all spreadsheet header row

For long running applictions it is often prudent to enable keepAlive. Without it, after some period of time you may start to see "connection closed" errors for what seems like no reason. If so, after reading this, you may decide to enable keepAlive:
